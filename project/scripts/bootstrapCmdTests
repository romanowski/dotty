#!/usr/bin/env bash

set -e

source $(dirname $0)/cmdTestsCommon.inc.sh

# check that benchmarks can run
"$SBT" "scala3-bench/jmh:run 1 1 tests/pos/alias.scala"
# The above is here as it relies on the bootstrapped library.
"$SBT" "scala3-bench-bootstrapped/jmh:run 1 1 tests/pos/alias.scala"
"$SBT" "scala3-bench-bootstrapped/jmh:run 1 1 -with-compiler compiler/src/dotty/tools/dotc/core/Types.scala"

echo "testing scala.quoted.Expr.run from sbt scala"
"$SBT" ";scala3-compiler-bootstrapped/scalac -with-compiler tests/run-staging/quote-run.scala; scala3-compiler-bootstrapped/scala -with-compiler Test" > "$tmp"
grep -qe "val a: scala.Int = 3" "$tmp"


# setup for `scalac`/`scala` script tests
"$SBT" dist/pack

# check that `scalac` compiles and `scala` runs it
echo "testing ./bin/scalac and ./bin/scala"
clear_out "$OUT"
./bin/scalac "$SOURCE" -d "$OUT"
./bin/scala -classpath "$OUT" "$MAIN" > "$tmp"
test "$EXPECTED_OUTPUT" = "$(cat "$tmp")"

# check that `scalac` and `scala` works for staging
clear_out "$OUT"
./bin/scalac tests/run-staging/i4044f.scala -d "$OUT"
./bin/scala -with-compiler -classpath "$OUT" Test > "$tmp"
./bin/scalad -project Staging -siteroot "$OUT" "tests/run-staging/i4044f.scala"

# check that `scalac -from-tasty` compiles and `scala` runs it
echo "testing ./bin/scalac -from-tasty and scala -classpath"
clear_out "$OUT1"
./bin/scalac -from-tasty -d "$OUT1" "$OUT/$TASTY"
./bin/scala -classpath "$OUT1" "$MAIN" > "$tmp"
test "$EXPECTED_OUTPUT" = "$(cat "$tmp")"

# echo ":quit" | ./dist/target/pack/bin/scala  # not supported by CI

echo "testing ./bin/scalad"
clear_out "$OUT"
./bin/scalad -project Hello -siteroot "$OUT" "$SOURCE"
